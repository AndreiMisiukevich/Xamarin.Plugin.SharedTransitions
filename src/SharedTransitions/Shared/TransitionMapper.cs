using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Xamarin.Forms;

namespace Plugin.SharedTransitions
{
    /// <summary>
    /// TransitionMapper implementation
    /// </summary>
    /// <seealso cref="ITransitionMapper" />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public class TransitionMapper : ITransitionMapper
    {
        readonly Lazy<List<TransitionMap>> _transitionStack = new Lazy<List<TransitionMap>>(() => new List<TransitionMap>());

        public IReadOnlyList<TransitionMap> TransitionStack => _transitionStack.Value;

        public IReadOnlyList<TransitionDetail> GetMap(Page page, string selectedGroup = null)
        {
            return TransitionStack.Where(x => x.PageId == page.Id)
                           .Select(x => x.Transitions.Where(tr=>tr.TransitionGroup == selectedGroup).ToList())
                           .FirstOrDefault() ?? new List<TransitionDetail>();
        }

        public IReadOnlyList<TransitionDetail> GetMap(Page page, bool ignoreGroup)
        {
            return TransitionStack.Where(x => x.PageId == page.Id)
                       .Select(x => x.Transitions.ToList())
                       .FirstOrDefault() ?? new List<TransitionDetail>();
        }

        /// <summary>
        /// Add transition information for the specified Page to the TransitionStack
        /// </summary>
        /// <param name="page">The page.</param>
        /// <param name="transitionName">The name of the shared transition.</param>
        /// <param name="transitionGroup">The transition group for dynamic transitions.</param>
        /// <param name="formsViewId">The Xamarin Forms view unique identifier.</param>
        /// <param name="nativeViewId">The Native view unique identifier.</param>
        public int Add(Page page, string transitionName, string transitionGroup, Guid formsViewId, int nativeViewId)
        {
            var transitionMap = _transitionStack.Value.FirstOrDefault(x => x.PageId == page.Id);

            if (transitionMap == null)
            {
                if (nativeViewId == 0) 
                    nativeViewId = 1;

                _transitionStack.Value.Add(
                    new TransitionMap
                    {
                        PageId = page.Id,
                        Transitions   = new List<TransitionDetail> {CreateTransition(transitionName, transitionGroup, formsViewId, nativeViewId)}
                    }
                );

                return nativeViewId;
            }

            var transitionDetail = transitionMap.Transitions.FirstOrDefault(x => x.TransitionName == transitionName && x.TransitionGroup == transitionGroup);
            if (transitionDetail == null)
            {
                //In iOS we dont have autogenerated IDs, let's create one!
                if (nativeViewId == 0)
                    nativeViewId = (transitionMap.Transitions.OrderBy(x => x.NativeViewId).LastOrDefault()?.NativeViewId ?? 0) + 1;

                transitionMap.Transitions.Add(CreateTransition(transitionName, transitionGroup, formsViewId, nativeViewId));
            }
            else
            {
                //the transition already exists lets check if the mapping is correct
                if (nativeViewId == 0)
                    nativeViewId = transitionDetail.NativeViewId;        //uops, the nativeId is 0 in the stack! No good
                else if (transitionDetail.NativeViewId != nativeViewId)
                    transitionDetail.NativeViewId = nativeViewId;       //the nativeId in the stack is different

                if (transitionDetail.FormsViewId != formsViewId)
                    transitionDetail.FormsViewId = formsViewId;
            }

            return nativeViewId;
        }

        /// <summary>
        /// Removes the specified page from the TransitionStack
        /// </summary>
        /// <param name="page">The page.</param>
        public void Remove(Page page)
        {
            _transitionStack.Value.Remove(_transitionStack.Value.FirstOrDefault(x => x.PageId == page.Id));
        }

        /// <summary>
        /// Creates a transition with additional information
        /// </summary>
        /// <param name="transitionName">The name of the shared transition.</param>
        /// <param name="transitionGroup">The transition group for dynamic transitions.</param>
        /// <param name="formsViewId">The Xamarin Forms view unique identifier.</param>
        /// <param name="nativeViewId">The Native view unique identifier.</param>
        /// <returns></returns>
        TransitionDetail CreateTransition(string transitionName,string transitionGroup, Guid formsViewId, int nativeViewId)
        {
            return new TransitionDetail
            {
                TransitionName  = transitionName,
                TransitionGroup = transitionGroup,
                FormsViewId     = formsViewId,
                NativeViewId    = nativeViewId
            };
        }
    }
}
